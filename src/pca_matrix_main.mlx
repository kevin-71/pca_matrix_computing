% Set up the Import Options and import the data
opts = spreadsheetImportOptions("NumVariables", 10);

% Specify sheet and range
opts.DataRange = "A2:J30";

n = 29; % nb individuals
p = 9; % nb variables

% Specify column names and types
opts.VariableNames = ["Countries", "ME_CO2", "AP", "TMFS", "POP_COSTAL", "MPA", "RES_COAST", "TAX", "E_INV", "ENERGY"];
opts.VariableTypes = ["string", "double", "double", "double", "double", "double", "double", "double", "double", "double"];

data = readtable("Data_initial_Matlab.xlsx", opts);
country_names = data(:,1);

% mean of each column
moy = mean(data{:, 2:end});

% standard deviation of eaxh column
standard_deviation = zeros(1, p);
for j = 1:p
    standard_deviation(j) = std(data{:, j+1});
end

% pr√©allocating matrix xs
XS = zeros(n, p);

% centered reduced matrix
for i = 1:n
    for j = 1:p
        XS(i, j) = (data{i, j+1} - moy(j)) / (standard_deviation(j) * sqrt(n));
    end
end
XS
writematrix(XS, "centered_reduced_data.xlsx");


%Correlation matrix
R = corr(data{:, 2:end});
writematrix(R, "correlation_matrix.xlsx");
R


% Diagonalization of R
[V,D] = eig(R); % Calculating eigenvalues and eigenvectors, V : eigenvectors ; D : eigenvalues 
eigenvalues = diag(D) % Because D is the eigenvalues in the diagonal matrix form, we extract the diagonal

writematrix(eigen, "eigenvalues.xlsx")


% Principal components matrix
F = XS * V;
F
writematrix(F, "PCM.xlsx")
% Calculate the inverse of the matrix of eigenvalues
R_inverse = diag(1 ./ sqrt(diag(R))); % calcuate R^-1/2
% Saturation matrix
S = XS' * F * R_inverse;
S
writematrix(S, "saturation_matrix_.xlsx")



%coordinates of variables in the new basis
% theses coefficients are equal to correlations between variables and factors
 
%Main Components
%qlt = coord(i, a)^2/sum(coord^2)(i); %quality of individual for axis a

